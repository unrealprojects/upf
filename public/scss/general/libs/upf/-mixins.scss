////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Single Transition prefixer
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
@mixin Transition($Transition-Name, $Transition-Time)
{
	-webkit-transition-property: 	$Transition-Name;
	-moz-transition-property: 		$Transition-Name;
	transition-property: 			$Transition-Name;
	-webkit-transition-duration:	$Transition-Time;
	-moz-transition-duration: 		$Transition-Time;
	transition-duration: 			$Transition-Time;
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Multiple transitions prefixer
// Usage: @mixin Transitions (#{color .3s, background-color .3s, border-color .3s});
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
@mixin Transitions($Transitions)
{
	-webkit-transition: 			$Transitions;
	-moz-transition: 				$Transitions;
	transition: 					$Transitions;
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Animation prefixer
// usage: @mixin Animation(SlideUp,.5s);
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
@mixin Animation($Name, $animation-time, $animation-delay: 0)
{
	-webkit-animation: 				$Name $animation-time;
	-moz-animation: 				$Name $animation-time;
	animation: 						$Name $animation-time;
	@if ($animation-delay != 0) {
		-webkit-animation-delay: 	$animation-delay;
		-moz-animation-delay: 		$animation-delay;
		animation-delay: 			$animation-delay;

	}
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Keyframe prefixer
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
@mixin Keyframes($animation-name)
{
	@-webkit-keyframes #{$animation-name} {
		@content;
	}
	@-moz-keyframes #{$animation-name} {
		@content;
	}
	@keyframes #{$animation-name} {
		@content;
	}
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Opacity prefixer (IE Compatible)
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
@mixin Opacity($value)
{
	$IEValue: 		$value * 100;
	opacity: 		$value;
	-ms-filter: 	"progid:DXImageTransform.Microsoft.Alpha(Opacity="+$IEValue+")";
	filter: 		alpha(opacity=$IEValue);
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
@mixin Round($Round-Mode: all, $Radius: $border-radius)
{
	@if ($Round-Mode == 'all') {
		border-radius: $Radius;
	} @else if ($Round-Mode == 'diagonal') {
		border-radius: $Radius 0;
	} @else if ($Round-Mode == 'diagonal-reverse') {
		border-radius: 0 $Radius;
	} @else if ($Round-Mode == 'left') {
		border-radius: $Radius 0 0 $Radius;
	} @else if ($Round-Mode == 'right') {
		border-radius: 0 $Radius $Radius 0;
	} @else if ($Round-Mode == 'top') {
		border-radius: $Radius $Radius 0 0;
	} @else if ($Round-Mode == 'bottom') {
		border-radius: 0 0 $Radius $Radius;
	} @else if ($Round-Mode == 'bottom-left') {
		border-bottom-left-radius: $Radius;
	} @else if ($Round-Mode == 'bottom-right') {
		border-bottom-right-radius: $Radius;
	} @else if ($Round-Mode == 'top-left') {
		border-top-left-radius: $Radius;
	} @else if ($Round-Mode == 'top-right') {
		border-top-right-radius: $Radius;
	} @else if ($Round-Mode == 'search') {
		border-radius: $size-l;
	}
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Позволяет назначать динамические (от размера экрана) размеры шрифта
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
@mixin Font-Size($FS-XS, $FS-S, $FS-M, $FS-L)
{
	font-size: $FS-M;
	@media all and (max-width: 640px) {
		font-size: $FS-XS;
	}
	@media all and (max-width: 1024px) and (min-width: 641px) {
		font-size: $FS-S;
	}
	@media all and (max-width: 1280px) and (min-width: 1025px) {
		font-size: $FS-M;
	}
	@media all and (max-width: 1920px) and (min-width: 1281px) {
		font-size: $FS-L;
	}
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
@mixin Gradient($Color-Start, $Color-End, $Gradient-Orientation: top)
{
	background-color: $Color-End;
	background: -webkit-linear-gradient($Gradient-Orientation, $Color-Start, $Color-End);
	background: -moz-linear-gradient($Gradient-Orientation, $Color-Start, $Color-End);
	background: -ms-linear-gradient($Gradient-Orientation, $Color-Start, $Color-End);
	background: -o-linear-gradient($Gradient-Orientation, $Color-Start, $Color-End);
	background: linear-gradient($Gradient-Orientation, $Color-Start, $Color-End);
	filter: progid:DXImageTransform.Microsoft.gradient(GradientType=0, StartColorStr='#{$Color-Start}', EndColorStr='#{$Color-End}');
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
@mixin Adaptive($Resolution-Min, $Mode: min-width) {
	@media screen and ($Mode: $Resolution-Min) {
		@content;
	}
}

@mixin Adaptive-Mobile() {
	@media screen and (max-width: $Viewport-XS) {
		@content;
	}
}

@mixin Columns($Column-Count, $Column-Gap) {

	-webkit-column-count: $Column-Count;
	-moz-column-count: $Column-Count;
	column-count: $Column-Count;

	-webkit-column-gap: $Column-Gap;
	-moz-column-gap: $Column-Gap;
	column-gap: $Column-Gap;
}

@mixin Rotate($Angle) {
	-ms-transform: rotate($Angle);
	-webkit-transform: rotate($Angle);
	transform: rotate($Angle);
}
