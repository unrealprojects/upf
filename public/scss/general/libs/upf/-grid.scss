// UPF Grid Module v.4.2




////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Grid variables
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
$Enable-Fraction-Grid:	true;			// Enables 1/2, 1/3, ... , 1/7 Grids
$Enable-12-Column:		true;			// Enables 1, 2, 3 ... , 12 Grid
$Enable-Merged-Grid:	true;			// Enables Grid Merge
$Enable-Split-Grid:		true;			// Enables Grid Split
/////////////////////////////
$Fraction-Grid-Limit:	7;				// Determines how much fraction grids do you want
$Grid-Gutter:			1%;

$Size: ($Viewport-XXS, $Viewport-XS, $Viewport-SM, $Viewport-MD, $Viewport-LR, $Viewport-HG);
$Size-Prefix: (XXS, XS, SM, MD, LR, HG);
$Sizes-Count: length($Size);
$Max: 12;
$Node-Merge: 100% / 12;
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Grid row. Nothing to see here
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
[class*='Grid']
{
	display: block;
	@extend ._Clearfix;
}
.Grid-960
{
	width: 960px!important;
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Disabling bullets in grids based on lists
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
ol[class*='Grid'] > li,
ul[class*='Grid'] > li
{
	@extend ._No-Bullets;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Making Nodes inline
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
[class*='Node-']
{
	width: 100%;
	float: left;
}

@include Adaptive-Mobile
{

	table.Adaptive td.Title > *,
	table.Adaptive td.Main > *,
	table.Adaptive td.Date > *,
	table.Adaptive td.Actions > *,
	table.Adaptive td.Data > *,
	[class*='Node-XXS-']
	{
		float: left;
	}

	table.Adaptive td.Title > *,
	table.Adaptive td.Main > *,
	table.Adaptive td.Date > *,
	table.Adaptive td.Actions > *,
	table.Adaptive td.Data > *,
	[class*='Grid'].Merge > .Node-XXS-6
	{
		width: $Node-Merge * 6
	}

}

@media all and (min-width: $Viewport-XS) {
	// Rows in Splitted grid must have gutter from both sides.
	[class*='Grid'].Split > *
	{
		margin-left: $Grid-Gutter/2;
		margin-right: $Grid-Gutter/2;
		&:first-child
		{
			margin-left: 0;
		}
		&:last-child
		{
			margin-right: 0;
		}
	}

	// End of Grid row. Pushing grid node to right
	[class*='Node-'].End
	{
		float: right;
	}
}



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Grid Generator. Pure Magic, don't touch or you'll die!
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
@for $a from 1 to $Sizes-Count
{
	@include Adaptive(nth($Size, $a))
	{

		@if ($Enable-Fraction-Grid == true)
		{
			@for $x from 2 to ($Fraction-Grid-Limit + 1)
			{
				// Generating Grid-xx-o-x
				@for $i from 1 to ($x + 1)
				{
					@if ($Enable-Merged-Grid == true)
					{
						[class*='Grid'].Merge > .Node-#{nth($Size-Prefix, $a)}-#{$i}-#{$x}
						{width: 100%/$x * $i}
					}
					@if ($Enable-Split-Grid  == true)
					{
						[class*='Grid'].Split > .Node-#{nth($Size-Prefix, $a)}-#{$i}-#{$x}
						{
							width: ( (100% - ($Grid-Gutter * $x)) / $x) * $i;
							@if ($i == $x)
							{
								margin-left: 0;
								margin-right:0;
							}
						}
					}
				}
			}
		}
		@if ($Enable-12-Column == true)
		{
			@for $i from 1 to ($Max + 1)
			{
				@if ($Enable-Merged-Grid == true)
				{
					[class*='Grid'].Merge > .Node-#{nth($Size-Prefix, $a)}-#{$i}
					{
						width: $Node-Merge * $i;
					}
				}

				@if ($Enable-Split-Grid == true)
				{
					[class*='Grid'].Split > .Node-#{nth($Size-Prefix, $a)}-#{$i}
					{
						width: ( ( (100% - (11 * $Grid-Gutter) ) / 12 ) * $i ) + ( ($i - 1) * $Grid-Gutter);
						@if ($i == $Max)
						{
							margin-left: 0;
							margin-right:0;
						}
					}
				}
			}
		}

	}
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// .Push-1 ... .Push-11
// Skips grid columns in Merged grids
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
@for $i from 1 to 12
{
	.Push-#{$i}
	{
		margin-left: $Node-Merge * $i;
	}
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// .Visible / .Hidden
// Makes element Hidden/Shown before reaching viewport
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
[class*='Hidden-']
{
	display: block;
}

.Hidden-XXS
{
	@include Adaptive-Mobile
	{
		display: none;
	}
}

table.Adaptive .Caption,
*[class*='Visible-']
{
	display: none;
}

table.Adaptive .Caption,
.Visible-XXS
{
	@include Adaptive-Mobile
	{
		display: inline-block;
	}
}

@for $i from 1 to $Sizes-Count
{
	@include Adaptive(nth($Size, $i))
	{
		.Hidden-#{nth($Size-Prefix , $i)}
		{
			display: none;
		}
		.Visible-#{nth($Size-Prefix , $i)}
		{
			display: inline-block;
		}
	}
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Demo mode highlights grid nodes and makes them visible to developer.
// NOT FOR PRODUCTION!
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
[class*='Grid']
{
	& > *
	{
		padding: $size-s $size-n;
		border: 1px solid $Clr-Cyan;
		background-color: $Clr-Cyan-Light;
	}

	+ [class*='Grid'].Demo
	{
		margin-top: $size-n;
	}
}

[class*='Visible-'].Demo,
[class*='Hidden-'].Demo
{
	padding: $size-s $size-n;
	border: 1px solid $Clr-Cyan;
	background-color: $Clr-Cyan-Light;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////